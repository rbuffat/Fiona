language: python

cache:
  directories:
    - $GDALINST
    - ~/.cache/pip

env:
  global:
    - PIP_WHEEL_DIR=$HOME/.cache/pip/wheels
    - PIP_FIND_LINKS=file://$HOME/.cache/pip/wheels
    - GDALINST=$HOME/gdalinstall
    - GDALBUILD=$HOME/gdalbuild
    - PROJINST=$HOME/gdalinstall
    - PROJBUILD=$HOME/projbuild
    - MAKEFLAGS="-j 2"

addons:
  apt:
    packages:
      - libatlas-dev
      - libatlas-base-dev
      - gfortran
      - libsqlite3-dev
      - sqlite3
  homebrew:
    packages:
      - expat
      - libspatialite
      - sqlite
      - geos

matrix:
  include:
    - os: linux
      dist: xenial
      python: "3.6"
      env:
        GDALVERSION="2.3.3"
        PROJVERSION="4.9.3"
    - os: osx
      osx_image: xcode11.2
      language: shell
      env:
        GDALVERSION="2.3.3"
        PROJVERSION="4.9.3"

    #- python: "3.6"
      #env:
        #GDALVERSION="2.4.4"
        #PROJVERSION="4.9.3"
    #- python: "3.7"
      #env:
        #GDALVERSION="2.4.4"
        #PROJVERSION="4.9.3"
    #- python: "3.6"
      #env:
        #GDALVERSION="3.0.3"
        #PROJVERSION="6.1.1"
    #- python: "3.7"
      #env:
        #GDALVERSION="3.0.3"
        #PROJVERSION="6.1.1"
    #- python: "3.8"
      #env:
        #GDALVERSION="3.0.3"
        #PROJVERSION="6.2.1"
    #- python: "3.8"
      #env:
        #GDALVERSION="master"
        #PROJVERSION="6.3.0"
  #allow_failures:
    #- env:
        #GDALVERSION="master"
        #PROJVERSION="6.3.0"


before_install:
  #- if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get -y install libatlas-dev libatlas-base-dev gfortran libsqlite3-dev sqlite3; fi
  #- if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install --only-dependencies gdal; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ls -l /Library/Frameworks; fi
  - python3 -m pip install -U pip
  - export PATH=$GDALINST/gdal-$GDALVERSION/bin:$GDALINST/proj-$PROJVERSION/bin:$PATH
  - export LD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$GDALINST/proj-$PROJVERSION/lib:$LD_LIBRARY_PATH
  - chmod +x scripts/travis_proj_install.sh && ./scripts/travis_proj_install.sh
  - chmod +x scripts/travis_gdal_install.sh && ./scripts/travis_gdal_install.sh
  - export GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal
  - export PROJ_LIB=$GDALINST/gdal-$GDALVERSION/share/proj
  - gdal-config --version
  - python3 -m pip wheel -r requirements-dev.txt
  - python3 -m pip install -r requirements-dev.txt

install:
  - if [ "$GDALVERSION" = "master" ]; then echo "Using gdal master"; elif [ $(gdal-config --version) == $(sed 's/[a-zA-Z].*//g' <<< $GDALVERSION) ]; then echo "Using gdal $GDALVERSION"; else echo "NOT using gdal $GDALVERSION as expected; aborting"; exit 1; fi
  - "GDAL_CONFIG=$GDALINST/gdal-$GDALVERSION/bin/gdal-config python3 -m pip install --no-deps --force-reinstall --no-use-pep517 -e ."
  - python3 -m pip freeze
  - fio --version
  - fio --gdal-version

script:
  - python3 -m pytest -m "not wheel" --cov fiona --cov-report term-missing

after_success:
  - coveralls || echo "!! intermittent coveralls failure"

