# Based on appveyor.yml from https://github.com/PDAL/PDAL and https://github.com/ogrisel/python-appveyor-demo
#

platform: x64


environment:

    global:
        # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
        # /E:ON and /V:ON options are not enabled in the batch script intepreter
        # See: http://stackoverflow.com/a/13751649/163740
        CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

    matrix:

        - PYTHON: "C:\\Python27.10-x64"
          PYTHON_VERSION: "2.7.10"
          PYTHON_ARCH: "64"


install:

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  
  # https://code.google.com/p/pymat2/wiki/WindowsTips
  #- ps: (Get-Content "%VS90COMNTOOLS%\..\..\VC\vcvarsall.bat) | ForEach-Object { $_ -replace "vcvarsamd64.bat", "vcvars64.bat" } | Set-Content "%VS90COMNTOOLS%\..\..\VC\vcvarsall.bat
  - '%CMD_IN_ENV% echo "conv env"'
  - if "%platform%" == "x86" call "%VS90COMNTOOLS%\..\..\VC\vcvarsall.bat"
  - if "%platform%" == "x64" xcopy "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvars64.bat" "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\amd64\vcvarsamd64.bat"
  - if "%platform%" == "x64" call "%VS90COMNTOOLS%\..\..\VC\vcvarsall.bat" amd64
  - if "%platform%" == "x64" set WIN64_ARG="WIN64=YES"


  - ps: mkdir C:\build | out-null
  
  - cd C:\build
  - ps: Start-FileDownload http://download.osgeo.org/proj/proj-4.9.1.tar.gz
  - 7z x proj-4.9.1.tar.gz
  - 7z x proj-4.9.1.tar
  - cd proj-4.9.1
  - nmake /f makefile.vc
  - nmake /f makefile.vc install-all

  - cd C:\build
  - ps: Start-FileDownload http://download.osgeo.org/gdal/2.0.1/gdal-2.0.1.tar.gz
  - 7z x gdal-2.0.1.tar.gz
  - 7z x gdal-2.0.1.tar
  - cd gdal-2.0.1
  
  - nmake /f makefile.vc MSVC_VER=1500 DEBUG=1 %WIN64_ARG% USER_DEFS=/WX
  - cd apps
  - nmake /f makefile.vc test_ogrsf.exe MSVC_VER=1500 DEBUG=1 %WIN64_ARG% USER_DEFS=/WX
 
  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"
  
build_script:
  # Build the compiled extension
  - cmd: echo %PATH%

  - cmd: echo %PYTHONPATH%

  - "%CMD_IN_ENV% python setup.py build_ext -IC:\build\\gdal-2.0.1\\include -lgdal_i -LC:\build\\gdal-2.0.1\\lib --gdalversion 2.0.1"
  
  - "%CMD_IN_ENV% python setup.py install"
  
  
test_script:
  # Run the project tests
  - cmd: SET

  - "%CMD_IN_ENV% nosetests --exclude test_filter_vsi --exclude test_geopackage"
  